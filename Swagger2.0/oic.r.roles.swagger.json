{
  "swagger": "2.0",
  "info": {
    "title": "OICSecurityRolesResource",
    "version": "v1.0-20170323",
    "license": {
      "name": "copyright 2016-2017 Open Connectivity Foundation, Inc. All rights reserved.",
      "x-description": "Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n        1.  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n        2.  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\n        THIS SOFTWARE IS PROVIDED BY THE Open Connectivity Foundation, INC. \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE OR WARRANTIES OF NON-INFRINGEMENT, ARE DISCLAIMED.\n        IN NO EVENT SHALL THE Open Connectivity Foundation, INC. OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n        HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
    }
  },
  "schemes": ["http"],
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "paths": {
    "/oic/sec/roles" : {
      "get": {
        "description": "This resource specifies roles that have been asserted.\nRetrieves the asserted roles data.\n",
        "parameters": [
          {"$ref": "#/parameters/interface"}
        ],
        "responses": {
            "200": {
              "description" : "",
              "x-example":
                {
                  "roles" :[
                      {
                        "credid":1,
                        "credtype":8,  
                        "subjectuuid":"00000000-0000-0000-0000-000000000000",
                        "publicdata":
                          {
                             "encoding":"oic.sec.encoding.pem",
                             "data":"PEMENCODEDROLECERT"
                          },
                        "optionaldata":        
                          {
                             "encoding":"oic.sec.encoding.pem",
                             "data":"PEMENCODEDISSUERCERT"
                          }
                      },
                      {
                        "credid":2,
                        "credtype":8,  
                        "subjectuuid":"00000000-0000-0000-0000-000000000000",
                        "publicdata":
                          {
                             "encoding":"oic.sec.encoding.pem",
                             "data":"PEMENCODEDROLECERT" 
                          }, 
                        "optionaldata":
                          {
                             "encoding":"oic.sec.encoding.pem",
                             "data":"PEMENCODEDISSUERCERT"
                          }
                      }
                  ], 
                  "rt":["oic.r.roles"], 
                  "if":["oic.if.baseline"]
                }
                ,
              "schema": { "$ref": "#/definitions/Roles" }
            },
            "400": {
              "description" : "The request is invalid."
            }
        }
      },
      "post": {
        "description": "Update the roles resource, i.e., assert new roles to this server.\n\nNew role certificates that match an existing certificate (i.e., publicdata\nand optionaldata are the same) are not added to the resource (and 204 is\nreturned). \n\nThe provided credid values are ignored, the resource assigns its own.\n",
        "parameters": [
          {"$ref": "#/parameters/interface"},
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": { "$ref": "#/definitions/Roles" },
            "x-example":
              {
                "roles" :[
                    {
                      "credid":1,    
                      "credtype":8,  
                      "subjectuuid":"00000000-0000-0000-0000-000000000000",
                      "publicdata":
                        {
                           "encoding":"oic.sec.encoding.pem",
                           "data":"PEMENCODEDROLECERT" 
                        }, 
                      "optionaldata":
                        {
                           "encoding":"oic.sec.encoding.pem",
                           "data":"PEMENCODEDISSUERCERT"
                        }
                    },
                    {
                      "credid":2,    
                      "credtype":8,  
                      "subjectuuid":"00000000-0000-0000-0000-000000000000",
                      "publicdata":
                        {
                           "encoding":"oic.sec.encoding.pem",
                           "data":"PEMENCODEDROLECERT" 
                        }, 
                      "optionaldata":
                        {
                           "encoding":"oic.sec.encoding.pem",
                           "data":"PEMENCODEDISSUERCERT"
                        }
                    }
                ], 
                "rt":["oic.r.roles"], 
                "if":["oic.if.baseline"]
                }
          }
        ],
        "responses": {
            "204": {
              "description" : "The roles entry is updated."
            },
            "400": {
              "description" : "The request is invalid."
            }
        }
      },
      "delete": {
        "description": "Deletes roles resource entries.\nDELETE does not support query parameters, all the entries are deleted.\n",
        "parameters": [
          {"$ref": "#/parameters/interface"}
        ],
        "responses": {
            "200": {
              "description" : "The roles resource has been successfully deleted."
            },
            "400": {
              "description" : "The request is invalid."
            }
        }
      }
    }
  },
  "parameters": {
    "interface" : {
      "in" : "query",
      "name" : "if",
      "type" : "string",
      "enum" : ["oic.if.baseline"]
    }
  },
  "definitions": {
    "Roles" : 
            {
        "properties": {
          "id": {
            "description": "Instance ID of this specific resource",
            "maxLength": 64,
            "readOnly": true,
            "type": "string"
          },
          "if": {
            "description": "The interface set supported by this resource",
            "items": {
              "enum": [
                "oic.if.baseline",
                "oic.if.ll",
                "oic.if.b",
                "oic.if.lb",
                "oic.if.rw",
                "oic.if.r",
                "oic.if.a",
                "oic.if.s"
              ],
              "type": "string"
            },
            "minItems": 1,
            "readOnly": true,
            "type": "array"
          },
          "n": {
            "description": "Friendly name of the resource",
            "maxLength": 64,
            "readOnly": true,
            "type": "string"
          },
          "roles": {
            "description": "List of role certificates",
            "items": {
              "properties": {
                "credid": {
                  "description": "Local reference to a credential resource",
                  "type": "integer"
                },
                "credtype": {
                  "description": "Representation of this credential's type",
                  "detail-desc": [
                    "0 - Empty credential used for testing",
                    "1 - Symmetric pair-wise key",
                    "2 - Symmetric group key",
                    "4 - Asymmetric signing key",
                    "8 - Asymmetric signing key with certificate",
                    "16 - PIN or password",
                    "32 - Asymmetric encryption key"
                  ],
                  "maximum": 63,
                  "minimum": 0,
                  "type": "integer"
                },
                "credusage": {
                  "description": "A string that provides hints about how/where the cred is used",
                  "type": "string"
                },
                "crms": {
                  "description": "The refresh methods that may be used to update this credential",
                  "items": {
                    "description": "Each enum represents a method by which the credentials are refreshed.",
                    "detail-desc": [
                      "oic.sec.crm.pro - Credentials refreshed by a provisioning service",
                      "oic.sec.crm.rdp - Credentials refreshed by a key agreement protocol and random PIN",
                      "oic.sec.crm.psk - Credentials refreshed by a key agreement protocol",
                      "oic.sec.crm.skdc - Credentials refreshed by a key distribution service",
                      "oic.sec.crm.pk10 - Credentials refreshed by a PKCS#10 request to a CA"
                    ],
                    "enum": [
                      "oic.sec.crm.pro",
                      "oic.sec.crm.psk",
                      "oic.sec.crm.rdp",
                      "oic.sec.crm.skdc",
                      "oic.sec.crm.pk10"
                    ],
                    "type": "string"
                  },
                  "type": "array"
                },
                "optionaldata": {
                  "description": "Credential revocation status information",
                  "properties": {
                    "data": {
                      "description": "The encoded structure",
                      "type": "string"
                    },
                    "encoding": {
                      "description": "A string specifying the encoding format of the data contained in the optdata",
                      "detail-desc": [
                        "oic.sec.encoding.jwt - RFC7517 JSON web token (JWT) encoding",
                        "oic.sec.encoding.cwt - RFC CBOR web token (CWT) encoding",
                        "oic.sec.encoding.base64 - Base64 encoded object",
                        "oic.sec.encoding.pem - Encoding for PEM encoded certificate or chain",
                        "oic.sec.encoding.der - Encoding for DER encoded certificate",
                        "oic.sec.encoding.raw - Raw hex encoded data"
                      ],
                      "enum": [
                        "oic.sec.encoding.jwt",
                        "oic.sec.encoding.cwt",
                        "oic.sec.encoding.base64",
                        "oic.sec.encoding.pem",
                        "oic.sec.encoding.der",
                        "oic.sec.encoding.raw"
                      ],
                      "type": "string"
                    },
                    "revstat": {
                      "description": "Revocation status flag - true = revoked",
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "revstat"
                  ],
                  "type": "object"
                },
                "period": {
                  "description": "String with RFC5545 Period",
                  "type": "string"
                },
                "privatedata": {
                  "description": "Private credential information",
                  "properties": {
                    "data": {
                      "description": "The encoded value",
                      "type": "string"
                    },
                    "encoding": {
                      "description": "A string specifying the encoding format of the data contained in the privdata",
                      "detail-desc": [
                        "oic.sec.encoding.jwt - RFC7517 JSON web token (JWT) encoding",
                        "oic.sec.encoding.cwt - RFC CBOR web token (CWT) encoding",
                        "oic.sec.encoding.base64 - Base64 encoded object",
                        "oic.sec.encoding.uri - URI reference",
                        "oic.sec.encoding.handle - Data is contained in a storage sub-system referenced using a handle",
                        "oic.sec.encoding.raw - Raw hex encoded data"
                      ],
                      "enum": [
                        "oic.sec.encoding.jwt",
                        "oic.sec.encoding.cwt",
                        "oic.sec.encoding.base64",
                        "oic.sec.encoding.uri",
                        "oic.sec.encoding.handle",
                        "oic.sec.encoding.raw"
                      ],
                      "type": "string"
                    },
                    "handle": {
                      "description": "Handle to a key storage resource",
                      "type": "integer"
                    }
                  },
                  "required": [
                    "encoding"
                  ],
                  "type": "object"
                },
                "publicdata": {
                  "description": "Public credential information",
                  "properties": {
                    "data": {
                      "description": "The encoded value",
                      "type": "string"
                    },
                    "encoding": {
                      "description": "A string specifying the encoding format of the data contained in the pubdata",
                      "detail-desc": [
                        "oic.sec.encoding.jwt - RFC7517 JSON web token (JWT) encoding",
                        "oic.sec.encoding.cwt - RFC CBOR web token (CWT) encoding",
                        "oic.sec.encoding.base64 - Base64 encoded object",
                        "oic.sec.encoding.uri - URI reference",
                        "oic.sec.encoding.pem - Encoding for PEM encoded certificate or chain",
                        "oic.sec.encoding.der - Encoding for DER encoded certificate",
                        "oic.sec.encoding.raw - Raw hex encoded data"
                      ],
                      "enum": [
                        "oic.sec.encoding.jwt",
                        "oic.sec.encoding.cwt",
                        "oic.sec.encoding.base64",
                        "oic.sec.encoding.uri",
                        "oic.sec.encoding.pem",
                        "oic.sec.encoding.der",
                        "oic.sec.encoding.raw"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "roleid": {
                  "description": "The role this credential possesses",
                  "properties": {
                    "authority": {
                      "description": "The Authority component of the entity being identified. A NULL <Authority> refers to the local entity or device.",
                      "type": "string"
                    },
                    "role": {
                      "description": "The ID of the role being identified.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "role"
                  ],
                  "type": "object"
                },
                "subjectuuid": {
                  "description": "An identifier formatted according to IETF RFC 4122.",
                  "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                  "type": "string"
                }
              },
              "required": [
                "subjectuuid",
                "credtype"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "rt": {
            "description": "Resource Type",
            "items": {
              "maxLength": 64,
              "type": "string"
            },
            "minItems": 1,
            "readOnly": true,
            "type": "array"
          }
        },
        "type": "object"
      }

  }
}
